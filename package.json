{
  "_args": [
    [
      {
        "raw": "github:valor-software/ng2-tree#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "github:valor-software/ng2-tree#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
        "spec": "github:valor-software/ng2-tree#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:valor-software/ng2-tree.git#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
          "sshUrl": "git+ssh://git@github.com/valor-software/ng2-tree.git#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
          "httpsUrl": "git+https://github.com/valor-software/ng2-tree.git#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
          "gitUrl": "git://github.com/valor-software/ng2-tree.git#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
          "shortcut": "github:valor-software/ng2-tree#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
          "directUrl": "https://raw.githubusercontent.com/valor-software/ng2-tree/d4404c4a0d5859636f03af7ac0c178deea5a36d1/package.json"
        }
      },
      "C:\\Users\\inigo\\Desktop\\Unomi2\\Unomi2"
    ]
  ],
  "_from": "valor-software/ng2-tree#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
  "_id": "ng2-tree@2.0.0-alpha.5",
  "_inCache": true,
  "_location": "/ng2-tree",
  "_phantomChildren": {},
  "_requested": {
    "raw": "github:valor-software/ng2-tree#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "github:valor-software/ng2-tree#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
    "spec": "github:valor-software/ng2-tree#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:valor-software/ng2-tree.git#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
      "sshUrl": "git+ssh://git@github.com/valor-software/ng2-tree.git#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
      "httpsUrl": "git+https://github.com/valor-software/ng2-tree.git#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
      "gitUrl": "git://github.com/valor-software/ng2-tree.git#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
      "shortcut": "github:valor-software/ng2-tree#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
      "directUrl": "https://raw.githubusercontent.com/valor-software/ng2-tree/d4404c4a0d5859636f03af7ac0c178deea5a36d1/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/valor-software/ng2-tree.git#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
  "_shasum": "ae25a5760967801161b0821af100a42e69f4c33b",
  "_shrinkwrap": null,
  "_spec": "github:valor-software/ng2-tree#d4404c4a0d5859636f03af7ac0c178deea5a36d1",
  "_where": "C:\\Users\\inigo\\Desktop\\Unomi2\\Unomi2",
  "author": {
    "name": "Georgii Rychko",
    "email": "rychko.georgiy@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/valor-software/ng2-tree/issues"
  },
  "dependencies": {},
  "description": "angular2 component for visualizing data that can be naturally represented as a tree",
  "devDependencies": {
    "@angular/common": "2.4.5",
    "@angular/compiler": "2.4.5",
    "@angular/compiler-cli": "2.4.5",
    "@angular/core": "2.4.5",
    "@angular/platform-browser": "2.4.5",
    "@angular/platform-browser-dynamic": "2.4.5",
    "@angular/platform-server": "2.4.5",
    "@types/core-js": "0.9.35",
    "@types/jasmine": "2.5.41",
    "@types/lodash": "4.14.51",
    "@types/node": "6.0.57",
    "@types/webpack": "1.12.35",
    "alertifyjs": "1.7.1",
    "async": "2.1.4",
    "codelyzer": "~2.0.0-beta.4",
    "conventional-changelog": "1.1.0",
    "conventional-changelog-cli": "1.2.0",
    "conventional-github-releaser": "1.1.3",
    "core-js": "2.4.1",
    "css-loader": "0.26.1",
    "font-awesome": "4.7.0",
    "gulp": "3.9.1",
    "gulp-gh-pages": "0.5.4",
    "istanbul-instrumenter-loader": "2.0.0",
    "jasmine-core": "2.5.2",
    "jasmine-data-provider": "2.2.0",
    "jasmine-spec-reporter": "~3.2.0",
    "karma": "1.6.0",
    "karma-cli": "1.0.1",
    "karma-coverage-istanbul-reporter": "0.2.0",
    "karma-jasmine": "1.1.0",
    "karma-phantomjs-launcher": "github:karma-runner/karma-phantomjs-launcher",
    "karma-remap-istanbul": "0.6.0",
    "karma-sourcemap-loader": "0.3.7",
    "karma-spec-reporter": "0.0.26",
    "karma-webpack": "1.8.1",
    "lodash": "4.17.4",
    "ng2-webpack-config": "0.0.5",
    "phantomjs-polyfill": "0.0.2",
    "phantomjs-prebuilt": "2.1.14",
    "protractor": "~5.1.0",
    "rimraf": "2.5.4",
    "rxjs": "5.0.3",
    "style-loader": "0.13.1",
    "systemjs-builder": "0.16.0",
    "ts-helpers": "1.1.2",
    "ts-node": "~2.0.0",
    "tslint": "4.4.2",
    "tslint-config-valorsoft": "1.2.0",
    "typescript": "2.0.10",
    "url-loader": "0.5.8",
    "webpack": "1.14.0",
    "webpack-dev-server": "1.16.2",
    "zone.js": "0.7.6"
  },
  "gitHead": "d4404c4a0d5859636f03af7ac0c178deea5a36d1",
  "homepage": "https://github.com/valor-software/ng2-tree",
  "keywords": [
    "tree",
    "ng2",
    "angular2",
    "ng2-tree",
    "branch",
    "tree-view",
    "branchy",
    "angular2-tree-view",
    "expand",
    "collapse",
    "recursive"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "ng2-tree",
  "optionalDependencies": {},
  "private": true,
  "readme": "# :herb: ng2-tree\n\nng2-tree is a simple [Angular 2](https://github.com/angular/angular) component for visualizing data that can be naturally represented as a tree.\n\n<!-- TOC -->\n\n- [:clapper: Usage](#clapper-usage)\n- [:eyes: Demo](#eyes-demo)\n- [:wrench: API](#wrench-api)\n  - [tree](#tree)\n  - [[tree]](#tree)\n    - [Load children asynchronously](#load-children-asynchronously)\n    - [Configure node via TreeModelSettings](#configure-node-via-treemodelsettings)\n  - [[settings]](#settings)\n  - [`Tree` class](#tree-class)\n  - [events (nodeMoved, nodeSelected, nodeRenamed, nodeRemoved, nodeCreated, nodeExpanded, nodeCollapsed)](#events-nodemoved-nodeselected-noderenamed-noderemoved-nodecreated-nodeexpanded-nodecollapsed)\n    - [NodeSelectedEvent](#nodeselectedevent)\n    - [NodeMovedEvent](#nodemovedevent)\n    - [NodeRemovedEvent](#noderemovedevent)\n    - [NodeCreatedEvent](#nodecreatedevent)\n    - [NodeRenamedEvent](#noderenamedevent)\n    - [NodeExpandedEvent](#nodeexpandedevent)\n    - [NodeCollapsedEvent](#nodecollapsedevent)\n- [Changes that should be taken into account in order to migrate from __ng2-tree V1__ to __ng2-tree V2__](#changes-that-should-be-taken-into-account-in-order-to-migrate-from-__ng2-tree-v1__-to-__ng2-tree-v2__)\n- [:bulb: Want to help?](#bulb-want-to-help)\n\n<!-- /TOC -->\n\n## :clapper: Usage\nOk, let's start with an installation - all you need to do is:\n\n`npm install --save ng2-tree`\n\nNow when you have `ng2-tree` installed, you are in a few steps from having tree in your application:\n\n1. Add the `TreeModule` to your application's module `imports` section:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { TreeModule } from 'ng2-tree';\n\n@NgModule({\n  declarations: [MyComponent],\n  imports:      [BrowserModule, TreeModule],\n  bootstrap:    [MyComponent]\n})\nexport class MyModule {\n}\n```\n\n2. As soon as the previous step is done we need to give ng2-tree a model to render - this can be accomplished by populating its `[tree]` attribute with an object that conforms to the `TreeModel` interface (see [API](#wrench-api)):\n\n```typescript\n// 1 - import required classes and interfaces\nimport { TreeModel } from 'ng2-tree';\n\n@Component({\n  selector: 'myComp',\n  // 2 - set [tree] attribute to tree object\n  template: `<tree [tree]=\"tree\"></tree>`\n})\nclass MyComponent {\n  // 3 - make sure that tree object conforms to the TreeModel interface\n  public tree: TreeModel = {\n    value: 'Programming languages by programming paradigm',\n    children: [\n      {\n        value: 'Object-oriented programming',\n        children: [\n          {value: 'Java'},\n          {value: 'C++'},\n          {value: 'C#'}\n        ]\n      },\n      {\n        value: 'Prototype-based programming',\n        children: [\n          {value: 'JavaScript'},\n          {value: 'CoffeeScript'},\n          {value: 'Lua'}\n        ]\n      }\n    ]\n  };\n}\n```\n\n3. Apart from that, in order to have usable tree in the browser, you need to add **ng2-tree styles** which you can find in your `node_modules/ng2-tree/styles.css`\n4. And finally, I suppose, you'd want to listen to events generated by ng2-tree (for a full list of supported events look at the [API](#wrench-api)). No problem, this is also easy to do - for example let's add a listener for `node was selected` kind of events:\n\n```typescript\n// 1 - import required classes and interfaces\nimport { TreeModel, NodeEvent } from 'ng2-tree';\n\n@Component({\n  selector: 'myComp',\n  // 2 - listent for nodeSelected events and handle them\n  template: `<tree [tree]=\"tree\" (nodeSelected)=\"logEvent($event)\"></tree>`\n})\nclass MyComponent {\n  public tree: TreeModel = { ... };\n\n  // 3 - print caught event to the console\n  public logEvent(e: NodeEvent): void {\n    console.log(e);\n  }\n}\n```\nVoila! That's pretty much it - enjoy :blush:\n\n## :eyes: Demo\nFeel free to examine the [demo](https://valor-software.github.io/ng2-tree) and its [sources](demo/) to find out how things are wired.\nAlso there is [another demo built with Angular CLI](https://github.com/rychkog/ng2-tree-demo).\n\n## :wrench: API\n\nHere is the fully stuffed *tree* tag that you can use in your templates:\n\n```html\n    <tree\n      [tree]=\"tree\"\n      [settings]=\"settings\"\n      (nodeRemoved)=\"handleRemoved($event)\"\n      (nodeRenamed)=\"handleRenamed($event)\"\n      (nodeSelected)=\"handleSelected($event)\"\n      (nodeMoved)=\"handleMoved($event)\"\n      (nodeCreated)=\"handleCreated($event)\"\n      (nodeExpanded)=\"handleExpanded($event)\"\n      (nodeCollapsed)=\"handleCollapsed($event)\">\n    </tree>\n```\n\nLet's go through every element of this structure one by one.\n\n### tree\n\n`tree` is the selector for `TreeComponent` which is bundled into `TreeModule`:\n\n### [tree]\n\n`tree` has a `[tree]` attribute which needs to be populated with an object implementing `TreeModel` interface. You can import this interface like below:\n\n```typescript\nimport { TreeModel } from 'ng2-tree';\n```\n\nHere is the definition of the `TreeModel` interface:\n\n```typescript\ninterface TreeModel {\n  value: string | RenamableNode;\n  id: string | number;\n  children?: Array<TreeModel>;\n  loadChildren?: ChildrenLoadingFunction;\n  settings?: TreeModelSettings;\n}\n```\n\nAs you can see - object that conforms to this interface has a recursive nature, example can be seen below:\n\n```typescript\n{\n    value: 'Programming languages by programming paradigm',\n    children: [\n      {\n        value: 'Object-oriented programming',\n        children: [\n          {value: 'Java'},\n          {value: 'C++'},\n          {value: 'C#'}\n        ]\n      },\n      {\n        value: 'Prototype-based programming',\n        children: [\n          {value: 'JavaScript'},\n          {value: 'CoffeeScript'},\n          {value: 'Lua'}\n        ]\n      }\n    ]\n  }\n```\n\nProperty `value` can be of type `string` or `RenamableNode`.\n`RenamableNode` gives you an additional control over the way node is renamed and rendered (by rendered I mean its text representation). Here is the definition of the `RenamableNode` interface:\n\n```typescript\ninterface RenamableNode {\n  // This method will be invoked in order to apply new value to this kind of node\n  setName(name: string): void;\n\n  // This method will be invoked in order to get a text for rendering as a node value\n  toString(): string;\n}\n```\n\nHere is an example of such a node in the `TreeModel` object:\n\n```typescript\n{\n    value: 'Programming languages by programming paradigm',\n    children: [\n      {\n        value: 'Object-oriented programming',\n        children: [\n          {\n            // I am a RenamableNode. Yeah, that's me :)\n            value: <RenamableNode>{\n              name: 'Java',\n              setName(name: string): void {\n                this.name = name;\n              },\n              toString(): string {\n                return this.name;\n              }\n            }\n          },\n          {value: 'C++'},\n          {value: 'C#'}\n        ]\n      },\n      {\n        value: 'Prototype-based programming',\n        loadChildren: (callback) => {\n          setTimeout(() => {\n            callback([\n              {value: 'JavaScript'},\n              {value: 'CoffeeScript'},\n              {value: 'TypeScript'}\n            ]);\n          }, 5000);\n        }\n      }\n    ]\n  };\n```\n\n#### Load children asynchronously\n\nAnother worth noting thing is `loadChildren`. This function on `TreeModel` allows you to load its __children asynchronously__.\n\n```typescript\n{\n  value: 'Prototype-based programming',\n  loadChildren: (callback) => {\n    setTimeout(() => {\n      callback([\n        {value: 'JavaScript'},\n        {value: 'CoffeeScript'},\n        {value: 'TypeScript'}\n      ]);\n    }, 5000);\n  }\n}\n```\n\nNode that defines this function is collapsed by default. At the moment of clicking 'Expand' arrow it starts loading its children by calling given function.\nIf `loadChildren` function is given to the node - `children` property is ignored. For more details - have a look at the [Demo](#eyes-demo).\n\n#### Configure node via TreeModelSettings\n\nApart from that `TreeModel` interface has an optional field called `settings` of type `TreeModelSettings`.\n\nHere is an example of its usage:\n\n```typescript\n{\n  value: 'Prototype-based programming',\n  settings: {\n    'static': true,\n    'rightMenu': true,\n    'leftMenu': true,\n    'cssClasses': {\n      'expanded': 'fa fa-caret-down fa-lg',\n      'collapsed': 'fa fa-caret-right fa-lg',\n      'leaf:': 'fa fa-lg'\n    },\n    'templates': {\n      'node': '<i class=\"fa fa-folder-o fa-lg\"></i>',\n      'leaf': '<i class=\"fa fa-file-o fa-lg\"></i>',\n      'leftMenu': '<i class=\"fa fa-navicon fa-lg\"></i>'\n    }\n  },\n  children: [\n    {value: 'JavaScript'},\n    {value: 'CoffeeScript'},\n    {value: 'Lua'}\n  ]\n}\n```\n\n* `static` - Boolean - This option makes it impossible to drag a tree or modify it in a some way, though you still can select nodes in the static tree and appropriate events will be generated.\n* `rightMenu` - Boolean - This option allows you to activate (true, by default) or deactivate (false) right menu when clicking with right button of a mouse.\n* `leftMenu` - Boolean - This option allows you to activate (true) or deactivate (false, by default) left menu.\n* `cssClasses` - Object:\n  * `expanded` - String - It specifies a css class (or classes) for an item which represents expanded state of a node. The item is clickable and it transitions the node to the collapsed state\n  * `collapsed` - String - It specifies a css class (or classes) for an item which represents collapsed state of a node. The item is clickable and it transitions the node to the expanded state\n  * `leaf` - String - It specifies a css class (or classes) for an item which represents a node without an option to expand or collapse - in other words: a leaf node.\n* `templates` - Object:\n  * `node` - String - It specifies a html template which will be included to the left of the node's value.\n  * `leaf` - String - It specifies a html template which will be included to the left of the leaf's value.\n  * `leftMenu` - String - It specifies a html template to the right of the node's value. This template becomes clickable and shows a menu on node's click.\n\nAll options that's defined on a `parent` are automatically applied to children. If you want you can override them by `settings` of the child node.\n\n### [settings]\n\nObject that should be passed to `[settings]` must be of type [`Ng2TreeSettings`](src/tree.types.ts). This attribute is __optional__. Right now only one setting is available in there - `rootIsVisible`. This setting allows you to make a root node of the tree _invisible_:\n\n```typescript\nconst treeSettings: Ng2TreeSettings = {\n  rootIsVisible: false\n}\n```\n\nBy default `rootIsVisible` equals to `true`\n\n### `Tree` class\n\nAlso in the next section you'll be reading about events generated by the `ng2-tree`. And here [Tree](src/tree.ts) class comes in handy for us, because its instances propagated with event objects. Under the hood `ng2-tree` wraps a `TreeModel` provided by the user in `Tree`. And `Tree` in turn has lots of useful methods and properties (like `parent`, `hasChild()`, `isRoot()` etc.)\n\n### events (nodeMoved, nodeSelected, nodeRenamed, nodeRemoved, nodeCreated, nodeExpanded, nodeCollapsed)\n\nHere is the diagram that shows tree events' hierarchy\n\n![tree events hierarchy](media/tree-events-hierarchy.png)\n\n`NodeEvent` is the root of the tree events' hierarchy. It defines property `node` that contains a receiver of the event action (`node` is an instance of the `Tree` class).\n\n`NodeDestructiveEvent` is the parent for all events that cause changes to the structure of the tree or to the node's value.\n\n#### NodeSelectedEvent\n\nYou can subscribe to the `NodeSelectedEvent` by attaching listener to the `(nodeSelected)` attribute\n\n```html\n    <tree\n      [tree]=\"tree\"\n      (nodeSelected)=\"handleSelected($event)\">\n    </tree>\n```\n\n`NodeSelectedEvent` has just one property `node` which contains a `Tree` object representing selected node.\n\n```typescript\n{node: <Tree>{...}}\n```\n\n#### NodeMovedEvent\n\nYou can subscribe to `NodeMovedEvent` by attaching listener to `(nodeMoved)` attribute\n\n```html\n    <tree\n      [tree]=\"tree\"\n      (nodeMoved)=\"handleMoved($event)\">\n    </tree>\n```\n\n`NodeMovedEvent` has two properties `node` and `previousParent` both of which contain `Tree` objects:\n\n- `node` contains a moved node;\n- `previousParent` contains a previous parent of the moved node;\n\n```typescript\n{node: <Tree>{...}, previousParent: <Tree>{...}}\n```\n\n#### NodeRemovedEvent\n\nYou can subscribe to `NodeRemovedEvent` by attaching listener to `(nodeRemoved)` attribute\n\n```html\n    <tree\n      [tree]=\"tree\"\n      (nodeRemoved)=\"handleRemoved($event)\">\n    </tree>\n```\n\n`NodeRemovedEvent` has a `node` property, which contains removed node (of type `Tree`).\n\n```typescript\n{node: <Tree>{...}}\n```\n\n#### NodeCreatedEvent\n\nYou can subscribe to `NodeCreatedEvent` by attaching listener to `(nodeCreated)` attribute\n\n```html\n    <tree\n      [tree]=\"tree\"\n      (nodeCreated)=\"handleCreated($event)\">\n    </tree>\n```\n\n`NodeCreatedEvent` has a `node` property of type `Tree`, which contains a created node.\n\n```typescript\n{node: <Tree>{...}}\n```\n\n#### NodeRenamedEvent\n\nYou can subscribe to `NodeRenamedEvent` by attaching listener to `(nodeRenamed)` attribute\n\n```html\n    <tree\n      [tree]=\"tree\"\n      (nodeRenamed)=\"handleRenamed($event)\">\n    </tree>\n```\n\n`NodeRenamedEvent` has three properties:\n\n- `node` contains node that was renamed (instance of `Tree`).\n- `oldValue` contains a value, that node used to have (it might be `string` or `RenamableNode`)\n- `newValue` contains a new value of the node (it might be `string` or `RenamableNode`)\n\n```typescript\n{\n  node: <Tree>{...},\n  oldValue: <string|RenamableNode>{...},\n  newValue: <string|RenamableNode>{...}\n}\n```\n\n#### NodeExpandedEvent\n\nYou can subscribe to `NodeExpandedEvent` by attaching listener to `(nodeExpanded)` attribute, this event wont fire on initial expansion\n\n```html\n    <tree\n      [tree]=\"tree\"\n      (nodeExpanded)=\"handleExpanded($event)\">\n    </tree>\n```\n\n`NodeExpandedEvent` has a `node` property of type `Tree`, which contains an expanded node.\n\n```typescript\n{node: <Tree>{...}}\n```\n\n#### NodeCollapsedEvent\n\nYou can subscribe to `NodeCollapsedEvent` by attaching listener to `(nodeCollapsed)` attribute\n\n```html\n    <tree\n      [tree]=\"tree\"\n      (nodeCollapsed)=\"handleCollapsed($event)\">\n    </tree>\n```\n\n`NodeCollapsedEvent` has a `node` property of type `Tree`, which contains a collapsed node.\n\n```typescript\n{node: <Tree>{...}}\n```\n\n## Changes that should be taken into account in order to migrate from __ng2-tree V1__ to __ng2-tree V2__\n- Events were reworked:\n  - In V1 all events that were inherited from NodeDestructiveEvent used to have property `parent`. It's not the case anymore. If you need a parent you should get it from `node` in event object like `node.parent`;\n  - All events used to have `node` property of type `TreeModel`. Now `node` is of type [Tree](#tree-class) (as well as `node.parent`);\n  - `NodeMovedEvent` now has property `previousParent`, which contains tree in which moved node used to be.\n- CSS styles in __ng2-tree V2__ are distributed as separate file which you can find in `node_modules/ng2-tree/styles.css`. That allows you to override ng2-tree styles more easely.\n\n## :bulb: Want to help?\n\nI am very appreciate for your ideas, proposals and found bugs which you can put in [github issues](https://github.com/valor-software/ng2-tree/issues). Thanks in advance!\n\n**P.S.** If you find it hard going through documentation, please, let me know which parts of it was difficult to grasp and I will improve them.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/valor-software/ng2-tree.git"
  },
  "scripts": {
    "changelog": "conventional-changelog -i CHANGELOG.md -s -p angular",
    "e2e": "protractor protractor.conf.js",
    "flow.build": "npm run flow.clean && npm run flow.compile && webpack --progress --color",
    "flow.clean": "rimraf coverage build demo-dist dist bundles factories .publish",
    "flow.compile": "npm run flow.compile:common && npm run flow.compile:system",
    "flow.compile:common": "ngc -p tsconfig-aot.json",
    "flow.compile:system": "node umd-bundler.js",
    "flow.deploy:gh-pages": "npm run flow.build && gulp deploy",
    "flow.lint": "npm run flow.tslint",
    "flow.serve": "webpack-dev-server --hot --inline --colors --display-error-details --display-cached",
    "flow.tslint": "tslint \"**/*.ts\" -c tslint.json --type-check -t prose -e \"node_modules/**\" -e \"test/**\" -e \"factories/**\" -e \"dist/**\" -e \"demo/**\" -e \"demo-dist/**\"",
    "github-release": "conventional-github-releaser -p angular",
    "post:publish": "npm run flow.deploy:gh-pages",
    "postversion": "git push origin master && git push --tags && npm run github-release && node publish.js",
    "pre:publish": "npm run flow.clean && npm run flow.lint && npm run test && npm run flow.compile && mkdir -p dist && cp src/styles.css dist && cp README.md dist && cp -R media dist",
    "preversion": "npm run flow.lint && npm test",
    "start": "npm run flow.serve",
    "test": "npm run flow.clean && karma start karma.conf.js",
    "test:cover": "COVERAGE=enabled npm run test",
    "version": "npm run changelog && git add CHANGELOG.md",
    "webdriver-update": "node ./node_modules/protractor/bin/webdriver-manager update"
  },
  "version": "2.0.0-alpha.5"
}
